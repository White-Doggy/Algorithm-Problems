3-2 알고리즘 정리
Problem, Input, Output를 매우 강조 + Algorithm, Complexity

시간 복잡성
일반적으로 가장 최악의 케이스를 비교 == O()  [ worst case ]
Bast case == 오메가(  ) 로 표기
Normal case == 세타( ) 로 표기

순차 탐색 / 이진 탐색

1.1	순차 탐색
순차적으로 비교하고 탐색
O(n)

1.2	이진 탐색
정렬된 자료에 대해 가운데 값을 기준으로 탐색
O(log n) 


2. Divide & Conquer
Mergesort / Quicksort 
2.2 Mergesort
최대한 나눈 뒤, 합쳐가며 정렬하는 방식
O(nlogn)
여기서 log n 은 병합에서 이뤄지는 과정의 단계 수 * 각 노드를 비교 하는 횟수 n으로 
n log n 의 결과가 나옴
2.4 Quicksort
임의의 pivot을 기준으로 큰 집단과 작은 집단으로 구분하고,
다시 그 집단들에 대해 임의 pivot을 설정한 뒤 과정을 반복
1 방법 == 첫번째를 pivot으로 잡고 하나씩 비교하며 위치를 이동시키고 최종적으로 pivot 이동
2 방법 == 첫번째를 pivot으로 정한 뒤, low와 high점을 비교해 이상이 있을 경우 멈추고
둘다 이상이 있는 경우 두 이상개체를 바꿔가며 정렬

최악의 경우 == 한쪽으로 순차적으로 몰린 경우
n-1 회 비교부터, 1회 비교까지의 합이라는 횟수가 되는데 이는
n(n-1)/2 임으로 == O(n^2) 


3. Dinamic Programing
Floyd algorithm / Chained Matrix Multiplication / Optimal Binary Search Trees 

++
manhattan tourist problem / 피보나치 
== 기본적으로 재귀적 처리가 가능하지만 낭비가 심함

Principle of optimal == 최적 값만 저장해도 된다는 이론

Floyd algorithm
모든 경로에 대해 최단 거리를 구함
O(n^3)
코드 == 기본 상태에서 1부터 k까지 해당 노드를 경유한 최단 거리를 계속 비교해가며 갱신한 결과 모든 노드에 대한 최단 거리를 구함
Chained Matrix Multiplication
배열의 곱에 대해서 최소 회수가 되는 순서를 구하는 문제
직삼각형 형태의 배열 형태로 결과가 나오며, 가장 가장자리의 0 부터 차례로 비교됨
O(N^2)

Optimal Binary Search Trees 
특정 키에 대해 확률이 지정된 경우, 탐색에 필요한 횟수가 최소가 되는 트리를 구하는 문제
다시 볼 필요가 있음;;;


4. Greedy algorithm
Minimum Spanning Trees / Prim’s 알고리즘 / Kruskal’s Algorithm / 허프만 코드 / Knapsack 

4.1 Minimum Spanning Trees
모든 노드를 방문하지만 cycle이 없는 부분 tree == spanning tree
이중, 모든 edge의 합이 최소인 spanning tree

4.1.1 Prim’s 알고리즘
최초의 하나, 이후 이어진 노드 중 최단 노드를 선택 해당 노드를 선택 노드 집단에 추가
이후 반복 적으로 최단 노드를 선택 하되, 선택된 노드와 비 선택 노드 간의 엣지만 선택

극단적으로 단순한 케이스 ++ O(n^3)
책 코드 == 거리위주의 비교 O(n^2)



4.1.2 Kruskal’s Algorithm
연결을 고려하지 않고, 가장 최소의 에지를 추가 하는 과정을 반복 ( 사이클 발생은 제외 )

4.2 Dijkstra 알고리즘 ( 특정 source 노드에서 모든 node까지의 최단 경로를 구함 )
인접한 노드에 대하여 최단거리를 선택
이를 방문한 node을 기준으로 다음 node의 최단 경로를 파악

코드 
Length를 통해 최단 거리 노드를 선택하는 부분과
최단 거리 노드 선택 이후 노드간 거리를 계산하는 부분으로 나눔


4.4 허프만 코드
관련 조건 ) Prefix 코드 – 다른 코드는 특정 코드에 포함되어서는 안됨 ( 트리코드는 조건 충족 )

특정 부호 호출 비율 높음으로 이에 따라 depth를 다르게 해줘야 함.

최단 평균 값을 구하는 코드
프리퀀시가 가장 낮은 2개의 노드를 이진 트리로 만든 뒤 다시 큐에 넣는 과정을 반복해 해결

++ priority queue == 넣고 빼낼 때 가장 작은 값을 꺼내는 자료구조

++ case : Two-Way Merge Pattern (TWMP) 
Merge sort 수의 최소화
Merge sort 시 리스트 길이의 합 만큼 sort 횟수가 됨
따라서, 허프만 코드 와 같은 알고리즘으로 list 길이가 가장 짧은 노드부터 처리하면 최소화 됨
4.5 Knapsack Problem
Fraction knapsack 을 그리디로 처리하는 방법
가치 / 무게를 통해 가장 높은 값의 노드부터 선택

0/1 knap sack, 을 그리디로 처리하는 방법
n개의 노드에 대해 0, 1로 포함 불포함 케이스를 모두 고려해 처리하는 방법
2^n 케이스의 확인

0/1 knap sack, 을 backtracking 활용해 처리하는 방식 
트리의 depth를 해당 노드의 유무로 처리 마지막 leaf 노드의 값을 바탕으로 처리


5 백트래킹
State space tree를 바탕으로 dfs로 탐색하며, 과정에 promising function을 통해 확인

n Qeen problem / sum of sub set

++ state space tree
Depth를 특정 노드 혹은 값이라 선택하고 해당 depth에서 노드를 선택하는 형태의 트리

++ decision problem / optimization problem
전자는 yes or no 의 답 / 후자는 실제 값을 보이는 답의 문제들


5.1 N Qeen problem 
State space tree를 바탕으로, depth를 qeen의 행 값으로, 노드의 순서 자체를 열 값으로 하여
DFS로 탐색 / 처리 과정에서 조건에 부합하지 않을 경우 바로 상위 노드로 백트래킹해 처리


5.2 sum of subset
특정 수의 집합에 대해, 집합 내의 수들의 합이 특정 값이 되는가에 대한 문제

코드 == 특정 수의 집합을 state space tree로 하여금 모든 케이스를 처리
단, 진행 중 특정 값인 W와 비교하는 promising 동작의 낭비를 막음


