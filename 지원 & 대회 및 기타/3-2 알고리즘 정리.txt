3-2 알고리즘 정리
Problem, Input, Output를 매우 강조 + Algorithm, Complexity

시간 복잡성
일반적으로 가장 최악의 케이스를 비교 == O()  [ worst case ]
Bast case == 오메가(  ) 로 표기
Normal case == 세타( ) 로 표기


1.1	순차 탐색
순차적으로 비교하고 탐색
O(n)

1.2	이진 탐색
정렬된 자료에 대해 가운데 값을 기준으로 탐색
O(log n) 


2. Divide & Conquer
2.2 Mergesort
최대한 나눈 뒤, 합쳐가며 정렬하는 방식
O(nlogn)
여기서 log n 은 병합에서 이뤄지는 과정의 단계 수 * 각 노드를 비교 하는 횟수 n으로 
n log n 의 결과가 나옴


2.4 Quicksort
임의의 pivot을 기준으로 큰 집단과 작은 집단으로 구분하고,
다시 그 집단들에 대해 임의 pivot을 설정한 뒤 과정을 반복
1 방법 == 첫번째를 pivot으로 잡고 하나씩 비교하며 위치를 이동시키고 최종적으로 pivot 이동
2 방법 == 첫번째를 pivot으로 정한 뒤, low와 high점을 비교해 이상이 있을 경우 멈추고
둘다 이상이 있는 경우 두 이상개체를 바꿔가며 정렬

최악의 경우 == 한쪽으로 순차적으로 몰린 경우
n-1 회 비교부터, 1회 비교까지의 합이라는 횟수가 되는데 이는
n(n-1)/2 임으로 == O(n^2) 


3. Dinamic Programing

++
manhattan tourist problem / 피보나치 
== 기본적으로 재귀적 처리가 가능하지만 낭비가 심함

Principle of optimal == 최적 값만 저장해도 된다는 이론


Floyd algorithm
모든 경로에 대해 최단 거리를 구함
O(n^3)
코드 == 기본 상태에서 1부터 k까지 해당 노드를 경유한 최단 거리를 계속 비교해가며 갱신한 결과 모든 노드에 대한 최단 거리를 구함
Chained Matrix Multiplication
배열의 곱에 대해서 최소 회수가 되는 순서를 구하는 문제
직삼각형 형태의 배열 형태로 결과가 나오며, 가장 가장자리의 0 부터 차례로 비교됨
O(N^2)

Optimal Binary Search Trees 
특정 키에 대해 확률이 지정된 경우, 탐색에 필요한 횟수가 최소가 되는 트리를 구하는 문제
다시 볼 필요가 있음;;;
