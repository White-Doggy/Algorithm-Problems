3-2 알고리즘 정리
Problem, Input, Output를 매우 강조 + Algorithm, Complexity

시간 복잡성
일반적으로 가장 최악의 케이스를 비교 == O()  [ worst case ]
Bast case == 오메가(  ) 로 표기
Normal case == 세타( ) 로 표기


1.1	순차 탐색
순차적으로 비교하고 탐색
O(n)

1.2	이진 탐색
정렬된 자료에 대해 가운데 값을 기준으로 탐색
O(log n) 


2. Divide & Conquer
2.2 Mergesort
최대한 나눈 뒤, 합쳐가며 정렬하는 방식
O(nlogn)
여기서 log n 은 병합에서 이뤄지는 과정의 단계 수 * 각 노드를 비교 하는 횟수 n으로 
n log n 의 결과가 나옴


2.4 Quicksort
임의의 pivot을 기준으로 큰 집단과 작은 집단으로 구분하고,
다시 그 집단들에 대해 임의 pivot을 설정한 뒤 과정을 반복
1 방법 == 첫번째를 pivot으로 잡고 하나씩 비교하며 위치를 이동시키고 최종적으로 pivot 이동
2 방법 == 첫번째를 pivot으로 정한 뒤, low와 high점을 비교해 이상이 있을 경우 멈추고
둘다 이상이 있는 경우 두 이상개체를 바꿔가며 정렬

최악의 경우 == 한쪽으로 순차적으로 몰린 경우
n-1 회 비교부터, 1회 비교까지의 합이라는 횟수가 되는데 이는
n(n-1)/2 임으로 == O(n^2) 


